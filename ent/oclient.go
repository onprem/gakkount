// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/prmsrswt/edu-accounts/ent/oclient"
	"github.com/prmsrswt/edu-accounts/ent/user"
)

// OClient is the model entity for the OClient schema.
type OClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ClientID holds the value of the "clientID" field.
	ClientID string `json:"clientID,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OClientQuery when eager-loading is set.
	Edges        OClientEdges `json:"edges"`
	oclient_user *int
}

// OClientEdges holds the relations/edges for other nodes in the graph.
type OClientEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OClientEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OClient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // clientID
		&sql.NullString{}, // secret
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*OClient) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // oclient_user
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OClient fields.
func (o *OClient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(oclient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		o.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field clientID", values[1])
	} else if value.Valid {
		o.ClientID = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field secret", values[2])
	} else if value.Valid {
		o.Secret = value.String
	}
	values = values[3:]
	if len(values) == len(oclient.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field oclient_user", value)
		} else if value.Valid {
			o.oclient_user = new(int)
			*o.oclient_user = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the OClient.
func (o *OClient) QueryUser() *UserQuery {
	return (&OClientClient{config: o.config}).QueryUser(o)
}

// Update returns a builder for updating this OClient.
// Note that, you need to call OClient.Unwrap() before calling this method, if this OClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *OClient) Update() *OClientUpdateOne {
	return (&OClientClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *OClient) Unwrap() *OClient {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: OClient is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *OClient) String() string {
	var builder strings.Builder
	builder.WriteString("OClient(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", name=")
	builder.WriteString(o.Name)
	builder.WriteString(", clientID=")
	builder.WriteString(o.ClientID)
	builder.WriteString(", secret=")
	builder.WriteString(o.Secret)
	builder.WriteByte(')')
	return builder.String()
}

// OClients is a parsable slice of OClient.
type OClients []*OClient

func (o OClients) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
