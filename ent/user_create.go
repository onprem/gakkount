// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/prmsrswt/edu-accounts/ent/course"
	"github.com/prmsrswt/edu-accounts/ent/department"
	"github.com/prmsrswt/edu-accounts/ent/oclient"
	"github.com/prmsrswt/edu-accounts/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the name field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the email field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetHash sets the hash field.
func (uc *UserCreate) SetHash(s string) *UserCreate {
	uc.mutation.SetHash(s)
	return uc
}

// SetRole sets the role field.
func (uc *UserCreate) SetRole(u user.Role) *UserCreate {
	uc.mutation.SetRole(u)
	return uc
}

// SetNillableRole sets the role field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(u *user.Role) *UserCreate {
	if u != nil {
		uc.SetRole(*u)
	}
	return uc
}

// SetPhoto sets the photo field.
func (uc *UserCreate) SetPhoto(s string) *UserCreate {
	uc.mutation.SetPhoto(s)
	return uc
}

// SetNillablePhoto sets the photo field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoto(s *string) *UserCreate {
	if s != nil {
		uc.SetPhoto(*s)
	}
	return uc
}

// SetAltEmail sets the altEmail field.
func (uc *UserCreate) SetAltEmail(s string) *UserCreate {
	uc.mutation.SetAltEmail(s)
	return uc
}

// SetNillableAltEmail sets the altEmail field if the given value is not nil.
func (uc *UserCreate) SetNillableAltEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetAltEmail(*s)
	}
	return uc
}

// SetPhone sets the phone field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetSalutation sets the salutation field.
func (uc *UserCreate) SetSalutation(s string) *UserCreate {
	uc.mutation.SetSalutation(s)
	return uc
}

// SetNillableSalutation sets the salutation field if the given value is not nil.
func (uc *UserCreate) SetNillableSalutation(s *string) *UserCreate {
	if s != nil {
		uc.SetSalutation(*s)
	}
	return uc
}

// SetLinkedin sets the linkedin field.
func (uc *UserCreate) SetLinkedin(s string) *UserCreate {
	uc.mutation.SetLinkedin(s)
	return uc
}

// SetNillableLinkedin sets the linkedin field if the given value is not nil.
func (uc *UserCreate) SetNillableLinkedin(s *string) *UserCreate {
	if s != nil {
		uc.SetLinkedin(*s)
	}
	return uc
}

// SetTwitter sets the twitter field.
func (uc *UserCreate) SetTwitter(s string) *UserCreate {
	uc.mutation.SetTwitter(s)
	return uc
}

// SetNillableTwitter sets the twitter field if the given value is not nil.
func (uc *UserCreate) SetNillableTwitter(s *string) *UserCreate {
	if s != nil {
		uc.SetTwitter(*s)
	}
	return uc
}

// SetFacebook sets the facebook field.
func (uc *UserCreate) SetFacebook(s string) *UserCreate {
	uc.mutation.SetFacebook(s)
	return uc
}

// SetNillableFacebook sets the facebook field if the given value is not nil.
func (uc *UserCreate) SetNillableFacebook(s *string) *UserCreate {
	if s != nil {
		uc.SetFacebook(*s)
	}
	return uc
}

// SetGithub sets the github field.
func (uc *UserCreate) SetGithub(s string) *UserCreate {
	uc.mutation.SetGithub(s)
	return uc
}

// SetNillableGithub sets the github field if the given value is not nil.
func (uc *UserCreate) SetNillableGithub(s *string) *UserCreate {
	if s != nil {
		uc.SetGithub(*s)
	}
	return uc
}

// SetRollNo sets the rollNo field.
func (uc *UserCreate) SetRollNo(s string) *UserCreate {
	uc.mutation.SetRollNo(s)
	return uc
}

// SetNillableRollNo sets the rollNo field if the given value is not nil.
func (uc *UserCreate) SetNillableRollNo(s *string) *UserCreate {
	if s != nil {
		uc.SetRollNo(*s)
	}
	return uc
}

// SetAdmissionTime sets the admissionTime field.
func (uc *UserCreate) SetAdmissionTime(t time.Time) *UserCreate {
	uc.mutation.SetAdmissionTime(t)
	return uc
}

// SetNillableAdmissionTime sets the admissionTime field if the given value is not nil.
func (uc *UserCreate) SetNillableAdmissionTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetAdmissionTime(*t)
	}
	return uc
}

// SetCourseEndTime sets the courseEndTime field.
func (uc *UserCreate) SetCourseEndTime(t time.Time) *UserCreate {
	uc.mutation.SetCourseEndTime(t)
	return uc
}

// SetNillableCourseEndTime sets the courseEndTime field if the given value is not nil.
func (uc *UserCreate) SetNillableCourseEndTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCourseEndTime(*t)
	}
	return uc
}

// SetDesignation sets the Designation field.
func (uc *UserCreate) SetDesignation(s string) *UserCreate {
	uc.mutation.SetDesignation(s)
	return uc
}

// SetNillableDesignation sets the Designation field if the given value is not nil.
func (uc *UserCreate) SetNillableDesignation(s *string) *UserCreate {
	if s != nil {
		uc.SetDesignation(*s)
	}
	return uc
}

// SetCourseID sets the course edge to Course by id.
func (uc *UserCreate) SetCourseID(id int) *UserCreate {
	uc.mutation.SetCourseID(id)
	return uc
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (uc *UserCreate) SetNillableCourseID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetCourseID(*id)
	}
	return uc
}

// SetCourse sets the course edge to Course.
func (uc *UserCreate) SetCourse(c *Course) *UserCreate {
	return uc.SetCourseID(c.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (uc *UserCreate) SetDepartmentID(id int) *UserCreate {
	uc.mutation.SetDepartmentID(id)
	return uc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (uc *UserCreate) SetNillableDepartmentID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetDepartmentID(*id)
	}
	return uc
}

// SetDepartment sets the department edge to Department.
func (uc *UserCreate) SetDepartment(d *Department) *UserCreate {
	return uc.SetDepartmentID(d.ID)
}

// AddOclientIDs adds the oclients edge to OClient by ids.
func (uc *UserCreate) AddOclientIDs(ids ...int) *UserCreate {
	uc.mutation.AddOclientIDs(ids...)
	return uc
}

// AddOclients adds the oclients edges to OClient.
func (uc *UserCreate) AddOclients(o ...*OClient) *UserCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddOclientIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) preSave() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if _, ok := uc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New("ent: missing required field \"hash\"")}
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
		u.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		u.Email = value
	}
	if value, ok := uc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldHash,
		})
		u.Hash = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldRole,
		})
		u.Role = value
	}
	if value, ok := uc.mutation.Photo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoto,
		})
		u.Photo = value
	}
	if value, ok := uc.mutation.AltEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAltEmail,
		})
		u.AltEmail = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
		u.Phone = value
	}
	if value, ok := uc.mutation.Salutation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSalutation,
		})
		u.Salutation = value
	}
	if value, ok := uc.mutation.Linkedin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLinkedin,
		})
		u.Linkedin = value
	}
	if value, ok := uc.mutation.Twitter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTwitter,
		})
		u.Twitter = value
	}
	if value, ok := uc.mutation.Facebook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFacebook,
		})
		u.Facebook = value
	}
	if value, ok := uc.mutation.Github(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGithub,
		})
		u.Github = value
	}
	if value, ok := uc.mutation.RollNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRollNo,
		})
		u.RollNo = value
	}
	if value, ok := uc.mutation.AdmissionTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldAdmissionTime,
		})
		u.AdmissionTime = value
	}
	if value, ok := uc.mutation.CourseEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCourseEndTime,
		})
		u.CourseEndTime = value
	}
	if value, ok := uc.mutation.Designation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDesignation,
		})
		u.Designation = value
	}
	if nodes := uc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CourseTable,
			Columns: []string{user.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.DepartmentTable,
			Columns: []string{user.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OclientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OclientsTable,
			Columns: []string{user.OclientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}

// UserCreateBulk is the builder for creating a bulk of User entities.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
