// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/prmsrswt/edu-accounts/ent/oclient"
	"github.com/prmsrswt/edu-accounts/ent/predicate"
	"github.com/prmsrswt/edu-accounts/ent/user"
)

// OClientUpdate is the builder for updating OClient entities.
type OClientUpdate struct {
	config
	hooks      []Hook
	mutation   *OClientMutation
	predicates []predicate.OClient
}

// Where adds a new predicate for the builder.
func (ou *OClientUpdate) Where(ps ...predicate.OClient) *OClientUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetName sets the name field.
func (ou *OClientUpdate) SetName(s string) *OClientUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetClientID sets the clientID field.
func (ou *OClientUpdate) SetClientID(s string) *OClientUpdate {
	ou.mutation.SetClientID(s)
	return ou
}

// SetSecret sets the secret field.
func (ou *OClientUpdate) SetSecret(s string) *OClientUpdate {
	ou.mutation.SetSecret(s)
	return ou
}

// SetUserID sets the user edge to User by id.
func (ou *OClientUpdate) SetUserID(id int) *OClientUpdate {
	ou.mutation.SetUserID(id)
	return ou
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ou *OClientUpdate) SetNillableUserID(id *int) *OClientUpdate {
	if id != nil {
		ou = ou.SetUserID(*id)
	}
	return ou
}

// SetUser sets the user edge to User.
func (ou *OClientUpdate) SetUser(u *User) *OClientUpdate {
	return ou.SetUserID(u.ID)
}

// Mutation returns the OClientMutation object of the builder.
func (ou *OClientUpdate) Mutation() *OClientMutation {
	return ou.mutation
}

// ClearUser clears the user edge to User.
func (ou *OClientUpdate) ClearUser() *OClientUpdate {
	ou.mutation.ClearUser()
	return ou
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OClientUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OClientUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OClientUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OClientUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oclient.Table,
			Columns: oclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oclient.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oclient.FieldName,
		})
	}
	if value, ok := ou.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oclient.FieldClientID,
		})
	}
	if value, ok := ou.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oclient.FieldSecret,
		})
	}
	if ou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oclient.UserTable,
			Columns: []string{oclient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oclient.UserTable,
			Columns: []string{oclient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oclient.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OClientUpdateOne is the builder for updating a single OClient entity.
type OClientUpdateOne struct {
	config
	hooks    []Hook
	mutation *OClientMutation
}

// SetName sets the name field.
func (ouo *OClientUpdateOne) SetName(s string) *OClientUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetClientID sets the clientID field.
func (ouo *OClientUpdateOne) SetClientID(s string) *OClientUpdateOne {
	ouo.mutation.SetClientID(s)
	return ouo
}

// SetSecret sets the secret field.
func (ouo *OClientUpdateOne) SetSecret(s string) *OClientUpdateOne {
	ouo.mutation.SetSecret(s)
	return ouo
}

// SetUserID sets the user edge to User by id.
func (ouo *OClientUpdateOne) SetUserID(id int) *OClientUpdateOne {
	ouo.mutation.SetUserID(id)
	return ouo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ouo *OClientUpdateOne) SetNillableUserID(id *int) *OClientUpdateOne {
	if id != nil {
		ouo = ouo.SetUserID(*id)
	}
	return ouo
}

// SetUser sets the user edge to User.
func (ouo *OClientUpdateOne) SetUser(u *User) *OClientUpdateOne {
	return ouo.SetUserID(u.ID)
}

// Mutation returns the OClientMutation object of the builder.
func (ouo *OClientUpdateOne) Mutation() *OClientMutation {
	return ouo.mutation
}

// ClearUser clears the user edge to User.
func (ouo *OClientUpdateOne) ClearUser() *OClientUpdateOne {
	ouo.mutation.ClearUser()
	return ouo
}

// Save executes the query and returns the updated entity.
func (ouo *OClientUpdateOne) Save(ctx context.Context) (*OClient, error) {

	var (
		err  error
		node *OClient
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OClientUpdateOne) SaveX(ctx context.Context) *OClient {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OClientUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OClientUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OClientUpdateOne) sqlSave(ctx context.Context) (o *OClient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oclient.Table,
			Columns: oclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oclient.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OClient.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oclient.FieldName,
		})
	}
	if value, ok := ouo.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oclient.FieldClientID,
		})
	}
	if value, ok := ouo.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oclient.FieldSecret,
		})
	}
	if ouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oclient.UserTable,
			Columns: []string{oclient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oclient.UserTable,
			Columns: []string{oclient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &OClient{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oclient.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
