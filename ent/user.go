// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/prmsrswt/edu-accounts/ent/course"
	"github.com/prmsrswt/edu-accounts/ent/department"
	"github.com/prmsrswt/edu-accounts/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// Photo holds the value of the "photo" field.
	Photo string `json:"photo,omitempty"`
	// AltEmail holds the value of the "altEmail" field.
	AltEmail string `json:"altEmail,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Salutation holds the value of the "salutation" field.
	Salutation string `json:"salutation,omitempty"`
	// Linkedin holds the value of the "linkedin" field.
	Linkedin string `json:"linkedin,omitempty"`
	// Twitter holds the value of the "twitter" field.
	Twitter string `json:"twitter,omitempty"`
	// Facebook holds the value of the "facebook" field.
	Facebook string `json:"facebook,omitempty"`
	// Github holds the value of the "github" field.
	Github string `json:"github,omitempty"`
	// RollNo holds the value of the "rollNo" field.
	RollNo string `json:"rollNo,omitempty"`
	// AdmissionTime holds the value of the "admissionTime" field.
	AdmissionTime time.Time `json:"admissionTime,omitempty"`
	// CourseEndTime holds the value of the "courseEndTime" field.
	CourseEndTime time.Time `json:"courseEndTime,omitempty"`
	// Designation holds the value of the "Designation" field.
	Designation string `json:"Designation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges            UserEdges `json:"edges"`
	course_users     *int
	department_users *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Course holds the value of the course edge.
	Course *Course
	// Department holds the value of the department edge.
	Department *Department
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // email
		&sql.NullString{}, // role
		&sql.NullString{}, // photo
		&sql.NullString{}, // altEmail
		&sql.NullString{}, // phone
		&sql.NullString{}, // salutation
		&sql.NullString{}, // linkedin
		&sql.NullString{}, // twitter
		&sql.NullString{}, // facebook
		&sql.NullString{}, // github
		&sql.NullString{}, // rollNo
		&sql.NullTime{},   // admissionTime
		&sql.NullTime{},   // courseEndTime
		&sql.NullString{}, // Designation
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // course_users
		&sql.NullInt64{}, // department_users
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[1])
	} else if value.Valid {
		u.Email = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field role", values[2])
	} else if value.Valid {
		u.Role = user.Role(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field photo", values[3])
	} else if value.Valid {
		u.Photo = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field altEmail", values[4])
	} else if value.Valid {
		u.AltEmail = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[5])
	} else if value.Valid {
		u.Phone = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field salutation", values[6])
	} else if value.Valid {
		u.Salutation = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field linkedin", values[7])
	} else if value.Valid {
		u.Linkedin = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field twitter", values[8])
	} else if value.Valid {
		u.Twitter = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field facebook", values[9])
	} else if value.Valid {
		u.Facebook = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field github", values[10])
	} else if value.Valid {
		u.Github = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rollNo", values[11])
	} else if value.Valid {
		u.RollNo = value.String
	}
	if value, ok := values[12].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field admissionTime", values[12])
	} else if value.Valid {
		u.AdmissionTime = value.Time
	}
	if value, ok := values[13].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field courseEndTime", values[13])
	} else if value.Valid {
		u.CourseEndTime = value.Time
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Designation", values[14])
	} else if value.Valid {
		u.Designation = value.String
	}
	values = values[15:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field course_users", value)
		} else if value.Valid {
			u.course_users = new(int)
			*u.course_users = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_users", value)
		} else if value.Valid {
			u.department_users = new(int)
			*u.department_users = int(value.Int64)
		}
	}
	return nil
}

// QueryCourse queries the course edge of the User.
func (u *User) QueryCourse() *CourseQuery {
	return (&UserClient{config: u.config}).QueryCourse(u)
}

// QueryDepartment queries the department edge of the User.
func (u *User) QueryDepartment() *DepartmentQuery {
	return (&UserClient{config: u.config}).QueryDepartment(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", photo=")
	builder.WriteString(u.Photo)
	builder.WriteString(", altEmail=")
	builder.WriteString(u.AltEmail)
	builder.WriteString(", phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", salutation=")
	builder.WriteString(u.Salutation)
	builder.WriteString(", linkedin=")
	builder.WriteString(u.Linkedin)
	builder.WriteString(", twitter=")
	builder.WriteString(u.Twitter)
	builder.WriteString(", facebook=")
	builder.WriteString(u.Facebook)
	builder.WriteString(", github=")
	builder.WriteString(u.Github)
	builder.WriteString(", rollNo=")
	builder.WriteString(u.RollNo)
	builder.WriteString(", admissionTime=")
	builder.WriteString(u.AdmissionTime.Format(time.ANSIC))
	builder.WriteString(", courseEndTime=")
	builder.WriteString(u.CourseEndTime.Format(time.ANSIC))
	builder.WriteString(", Designation=")
	builder.WriteString(u.Designation)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
